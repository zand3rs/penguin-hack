// For cross-browser compatibility
@mixin border-radius($radius: 4px) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

@mixin transform( $content ) {
  -webkit-transform: $content;
  -moz-transform: $content;
  -ms-transform: $content;
  transform: $content;
}

@mixin transition( $content ) {
  -webkit-transition: $content;
  -moz-transition: $content;
  -ms-transition: $content;
  transition: $content;
}

@mixin box-shadow($content) {
  -webkit-box-shadow: $content;
  -moz-box-shadow: $content;
  -ms-box-shadow: $content;
  box-shadow: $content;
}

@mixin animate-it( $content ) {
  -webkit-animation: $content;
  -moz-animation: $content;
  -ms-animation: $content;
  animation: $content;
}

@mixin linearGradient($color1, $color2, $firstStop:0%, $secondStop: 100%) {
  background: $color1;
  /* Old browsers */
  background: -moz-linear-gradient(top, $color1 $firstStop, $color2 $secondStop);
  /* FF3.6+ */
  background: -webkit-gradient(linear, left top, left bottom, color-stop($firstStop,$color1), color-stop($secondStop,$color2));
  /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(top, $color1 $firstStop,$color2 $secondStop);
  /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient(top, $color1 $firstStop,$color2 $secondStop);
  /* Opera 11.10+ */
  background: -ms-linear-gradient(top, $color1 $firstStop,$color2 $secondStop);
  /* IE10+ */
  background: linear-gradient(to bottom, $color1 $firstStop,$color2 $secondStop);
  /* W3C */
  filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='$color1', endColorstr='$color2',GradientType=0 );
  /* IE6-9 */
}

@mixin diagonalGradient($color1, $color2) {
  background: $color1;
  background: -moz-linear-gradient(-45deg, $color1 0%, $color2 100%);
  background: -webkit-gradient(linear, left top, right bottom, color-stop(0%,$color1), color-stop(100%,$color2));
  background: -webkit-linear-gradient(-45deg, $color1 0%,$color2 100%);
  background: -o-linear-gradient(-45deg, $color1 0%,$color2 100%);
  background: -ms-linear-gradient(-45deg, $color1 0%,$color2 100%);
  background: linear-gradient(135deg, $color1 0%,$color2 100%);
  filter:progid:DXImageTransform.Microsoft.gradient( startColorstr="$color1", endColorstr="$color2",GradientType=1 );
}

// Hide scrollbars in webkit
@mixin hideScrollBars() {
  &::-webkit-scrollbar {
    display: none;
  }
}

// Clearfix for Floats
@mixin clearfix {
  *zoom: 1;
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Strip Unit
@function stripUnit( $num ) {
  @return $num / ( $num * 0 + 1 );
}

// Px to Em
@function pxEm( $px, $base-px: $base-pixel ) {
  @return stripUnit( $px ) / stripUnit( $base-px ) * 1em;
}

// Hover / Active / Focus
@mixin hoverStyles() {
  &:active,
  &:hover,
  &:focus {
    @content;
  }
}

// Used for hiding text in links
@mixin hideText( $display : block ) {
  text-align: left;
  text-indent: -99999em;

  display: $display;
  // Added for the native Android browser
  white-space: nowrap;
  overflow: hidden;
}

// CSS Triangles
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  content: "";
  display: inline-block;
  width: 0;
  height: 0;
  border: inset $triangle-size;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
    border-top-style: solid;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
    border-bottom-style: solid;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
  }
}

// Media queries
@mixin breakpoint($point) {
  @if $point == small-screens-only {
    @media only screen and ( max-width: $desktop - 1 ) {
      @content
    }
  }

  @else if $point == small-portrait-only {
    @media only screen and ( max-width: $small-landscape - 1 ) {
      @content
    }
  }

  @else if $point == small-landscape-only {
    @media only screen and ( min-width: $small-landscape ) and ( max-width: $tablet-portrait - 1 ) {
      @content
    }
  }

  @else if $point == small-landscape-and-up {
    @media only screen and ( min-width: $small-landscape ) {
      @content
    }
  }

  @else if $point == small-landscape-and-below {
    @media only screen and ( max-width: $tablet-portrait - 1 ) {
      @content
    }
  }

  @else if $point == tablet-portrait-only {
    @media only screen and ( min-width: $tablet-portrait ) and ( max-width: $desktop - 1 ) {
      @content
    }
  }

  @else if $point == tablet-and-up {
    @media only screen and ( min-width: $tablet-portrait ) {
      @content
    }
  }

  @else if $point == desktop-only {
    @media only screen and ( min-width: $desktop ) {
      @content
    }
  }
}
